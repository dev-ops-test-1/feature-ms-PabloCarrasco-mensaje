plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
        id "org.sonarqube" version "4.2.1.3168"
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

sonar {
  properties {
    property "sonar.projectKey", "dev-ops-test-1_feature-ms-PabloCarrasco-mensaje"
    property "sonar.organization", "dev-ops-test-1"
    property "sonar.host.url", "https://sonarcloud.io/"
    property "sonar.projectName", "feature-ms-PabloCarrasco-mensaje"
  }
}

jacoco {
    toolVersion = "0.8.7" // Use the latest version
    reportsDir = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport // attach the report generation to the test task
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*Test*'])
        }))
    }
}

task checkCoverage {
    dependsOn test
    doLast {
        def coverageFile = file("$buildDir/jacoco/jacocoTestReport.xml")
        def xml = new XmlSlurper().parse(coverageFile)

        def coverage = xml.'counter'.find { it.@type == 'INSTRUCTION' }.@covered.toInteger()

        if (coverage < 85) {
            throw new GradleException("Minimum test coverage not met. Got $coverage%, expected at least 85%.")
        }
    }
}
